---
harness('inviqa/viper'):
  description: A docker based development environment for viper.
  require:
    services:
      - proxy
    confd:
      - harness:/
      - harness:/
    attributes:
      secret:
        - npm.repositories.inviqa.token
        - gateway.env.AUTH_TOKEN_SECRET
---
command('gateway rebuild'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)
    passthru ws exec app build:gateway
    run ws gateway restart
command('gateway <action>'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
    ACTION: = input.argument('action')
  exec: |
    #!bash(workspace:/)
    passthru docker-compose exec node supervisorctl "${ACTION}" "gateway"
command('client <action>'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
    ACTION: = input.argument('action')
  exec: |
    #!bash(workspace:/)
    passthru docker-compose exec node supervisorctl "${ACTION}" "client"
---
attributes:
  npm:
    repositories:
      inviqa:
        host: npm.pkg.github.com
        token: ~

  app:
    image_pull_config: null
    image: = @('docker.repository') ~ ':' ~ @('app.version')
    resourcePrefix: ''
    services: []

  backend:
    path: /app
    build:
      when: -f "package.json"
      steps:
        - passthru yarn install
        - passthru yarn generate:types
        - passthru yarn build:deps
        - |
          if [ "$APP_BUILD" = static ]; then
            passthru yarn run --cwd=app/client build:storybook
          fi

  gateway:
    path: /app
    build:
      when: -f "/app/gateway/package.json"
      steps:
        - run yarn build:app:gateway
    port: 4000
    resources:
      memory: 512Mi
    env:
      SUPERVISOR_START_GATEWAY: "true"
      GATEWAY_HOST: = 'gateway-' ~ @('hostname')
      AUTH_TOKEN_SECRET: ~
    secrets: ~
    ingress:
      enabled: true
      hosts:
        - = 'gateway-' ~ @('hostname')

  client:
    path: /app
    image:
    build:
      when: -f "/app/client/package.json"
      steps:
        - |
          if [ "$APP_BUILD" = dynamic ]; then
            run yarn build:app:client
          fi
    port: 3000
    resources:
      memory: 1024Mi
    env:
      SUPERVISOR_START_CLIENT: "true"
      GATEWAY_SSR_URL: http://localhost:4000/graphql
      CLIENT_HOST: = @('hostname')
    secrets: ~
    ingress:
      enabled: true
      hosts:
        - = @('hostname')

  service: {}
  environment:
    preview:
      app:
        gateway:
          env:
            SUPERVISOR_START_CLIENT: "false"
        client:
          env:
            SUPERVISOR_START_GATEWAY: "false"
    production:
      app:
        gateway:
          env:
            SUPERVISOR_START_CLIENT: "false"
        client:
          env:
            SUPERVISOR_START_GATEWAY: "false"
---
import:
  - harness/config/*.yml
  - harness/attributes/*.yml
  - harness/attributes/environment/={env('MY127WS_ENV','local')}.yml
