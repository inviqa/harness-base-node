
command('enable'):
  env:
    USE_MUTAGEN:          = @('host.os') == 'darwin' and @('mutagen') == 'yes' ? 'yes':'no'
    APP_BUILD:            = @('app.build')
    APP_MODE:             = @('app.mode')
    NAMESPACE:            = @('namespace')
    HAS_ASSETS:           = @('aws.bucket') !== null and @('aws.bucket') !== '' ? 'yes':'no'
    COMPOSE_PROJECT_NAME: = @('namespace')
    COMPOSE_DOCKER_CLI_BUILD: = @('docker.buildkit.enabled') ? '1':'0'
    DOCKER_BUILDKIT:          = @('docker.buildkit.enabled') ? '1':'0'
  exec: |
    #!bash(workspace:/)
    set -- all
    source .my127ws/harness/scripts/enable.sh

command('enable console'):
  env:
    USE_MUTAGEN:          = @('host.os') == 'darwin' and @('mutagen') == 'yes' ? 'yes':'no'
    APP_BUILD:            = @('app.build')
    APP_MODE:             = @('app.mode')
    NAMESPACE:            = @('namespace')
    HAS_ASSETS:           = @('aws.bucket') !== null and @('aws.bucket') !== '' ? 'yes':'no'
    COMPOSE_PROJECT_NAME: = @('namespace')
    COMPOSE_DOCKER_CLI_BUILD: = @('docker.buildkit.enabled') ? '1':'0'
    DOCKER_BUILDKIT:          = @('docker.buildkit.enabled') ? '1':'0'
  exec: |
    #!bash(workspace:/)
    set -- console
    source .my127ws/harness/scripts/enable.sh

command('disable'):
  env:
    USE_MUTAGEN:          = @('host.os') == 'darwin' and @('mutagen') == 'yes' ? 'yes':'no'
    NAMESPACE:            = @('namespace')
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)
    source .my127ws/harness/scripts/disable.sh

command('destroy [--all]'):
  env:
    USE_MUTAGEN:          = @('host.os') == 'darwin' and @('mutagen') == 'yes' ? 'yes':'no'
    NAMESPACE:            = @('namespace')
    COMPOSE_PROJECT_NAME: = @('namespace')
    DESTROY_ALL:          = input.option('all') ? 'yes':'no'
  exec: |
    #!bash(workspace:/)|@
    source .my127ws/harness/scripts/destroy.sh

command('rebuild'):
  env:
    USE_MUTAGEN:          = @('host.os') == 'darwin' and @('mutagen') == 'yes' ? 'yes':'no'
    NAMESPACE:            = @('namespace')
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    source .my127ws/harness/scripts/rebuild.sh

command('networks external'):
  env:
    NETWORKS: = get_docker_external_networks()
  exec: |
    #!bash(workspace:/)
    for NETWORK in ${NETWORKS}; do
      if ! docker network inspect "${NETWORK}" >/dev/null 2>&1; then
        passthru docker network create "${NETWORK}"
      fi
    done

command('yarn %'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|=
    if [ -t 0 ] && [ -t 1 ] ; then
      docker-compose exec -u node node yarn ={ input.argument('%') }
    else
      docker-compose exec -T -u node node yarn ={ input.argument('%') }
    fi

command('exec %'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|=
    if [ -t 0 ] && [ -t 1 ] ; then
      docker-compose exec -u node node ={ input.argument('%') }
    else
      docker-compose exec -T -u node node ={ input.argument('%') }
    fi

command('logs %'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(harness:/)|=
    docker-compose logs ={input.argument('%')}

command('ps'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    docker-compose ps

command('console'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    passthru docker-compose exec -u node node bash
command('assets download'):
  env:
    AWS_ACCESS_KEY_ID: = @('aws.access_key_id')
    AWS_ID: = @('aws.access_key_id')
    AWS_KEY: = @('aws.secret_access_key')
    AWS_SECRET_ACCESS_KEY: = @('aws.secret_access_key')
  exec: |
    #!bash(workspace:/)|@
    passthru ws.aws s3 sync '@('assets.remote')' '@('assets.local')'

command('assets upload'):
  env:
    AWS_ACCESS_KEY_ID: = @('aws.access_key_id')
    AWS_ID: = @('aws.access_key_id')
    AWS_KEY: = @('aws.secret_access_key')
    AWS_SECRET_ACCESS_KEY: = @('aws.secret_access_key')
  exec: |
    #!bash(workspace:/)|@
    passthru ws.aws s3 sync '@('assets.local')' '@('assets.remote')'


command('port <service>'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|=
    passthru docker port "$(docker-compose ps -q ={input.argument('service')})"

command('set <attribute> <value>'):
  env:
    ATTR_KEY: = input.argument('attribute')
    ATTR_VAL: = input.argument('value')
  exec: |
    #!bash(workspace:/)|=
    if [ ! -f workspace.override.yml ]; then
      touch workspace.override.yml
    fi
    if grep -q "attribute('${ATTR_KEY}'):" workspace.override.yml; then
      echo "Removing old '${ATTR_KEY}' setting from workspace.override.yml"
      sed "/^attribute('${ATTR_KEY}'): .*$/d" workspace.override.yml > workspace.override.yml.tmp && mv workspace.override.yml.tmp workspace.override.yml
    fi
    if grep -q "attribute('${ATTR_KEY}'):" workspace.override.yml; then
      echo 'Could not remove line from workspace.override.yml, failing'
      exit 1
    fi
    echo "Setting '${ATTR_KEY}' setting to '${ATTR_VAL}' in workspace.override.yml"
    echo "attribute('${ATTR_KEY}'): ${ATTR_VAL}" >> workspace.override.yml

command('harness update existing'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    ws disable
    rm -rf .my127ws
    ws install --step=download
    ws harness prepare
    touch .my127ws/.flag-built
    ws refresh
    ws exec app overlay:apply
    ws exec app migrate
    ws exec app welcome

command('harness update fresh'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    ws disable || true
    rm -rf .my127ws
    ws install

command('generate token <length>'):
  env:
    LENGTH: = input.argument('length')
  exec: |
    #!php
    $ascii_codes = range(48, 57) + range(97, 122) + range(65, 90);
    $codes_length = (count($ascii_codes)-1);
    shuffle($ascii_codes);
    $string = '';
    for($i = 1; $i <= $env['LENGTH']; $i++) {
        $previous_char = $char ?? '';
        $char = chr($ascii_codes[random_int(0, $codes_length)]);
        while($char == $previous_char){
            $char = chr($ascii_codes[random_int(0, $codes_length)]);
        }
        $string .= $char;
    }
    echo $string;
